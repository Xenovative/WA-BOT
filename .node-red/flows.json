[{"id":"314f1f3da6bf8f58","type":"tab","label":"Inquiry Transfer","disabled":false,"info":"Automatically forwards customer inquiries to specified admin numbers"},{"id":"broker","type":"mqtt-broker","name":"Local Broker","broker":"localhost","port":"1883","clientid":"","autoConnect":true,"usetls":false,"protocolVersion":"4","keepalive":"60","cleansession":true,"birthTopic":"","birthQos":"0","birthPayload":"","birthMsg":{},"closeTopic":"","closeQos":"0","closePayload":"","closeMsg":{},"willTopic":"","willQos":"0","willPayload":"","willMsg":{},"sessionExpiry":""},{"id":"08707069f65f29ac","type":"mqtt in","z":"314f1f3da6bf8f58","name":"WhatsApp Messages","topic":"whatsapp/messages","qos":"2","datatype":"json","broker":"broker","nl":false,"rap":true,"rh":0,"inputs":0,"x":170,"y":120,"wires":[["f4fd7bd808d52bf8"]]},{"id":"f4fd7bd808d52bf8","type":"function","z":"314f1f3da6bf8f58","name":"Detect Inquiry","func":"// Extract message content\nconst messageData = msg.payload;\n\n// Skip if not a text message\nif (!messageData || !messageData.text) {\n    return null;\n}\n\n// Get current time for logging\nconst now = new Date();\nmsg.formattedTime = now.toLocaleString();\n\n// Check for Chinese format inquiry\nconst text = messageData.text;\n\n// Look for the Chinese format pattern\n// ÂßìÂêçÔºöxxx\n// ÈõªË©±Ôºöxxx\n// Êü•Ë©¢‰∫ãÈ†ÖÔºöxxx\nconst namePattern = /ÂßìÂêç[Ôºö:](.*?)(?=[\\n\\r]|$)/;\nconst phonePattern = /ÈõªË©±[Ôºö:](.*?)(?=[\\n\\r]|$)/;\nconst inquiryPattern = /Êü•Ë©¢‰∫ãÈ†Ö[Ôºö:](.*?)(?=[\\n\\r]|$)/;\n\nconst nameMatch = text.match(namePattern);\nconst phoneMatch = text.match(phonePattern);\nconst inquiryMatch = text.match(inquiryPattern);\n\n// Check if message contains all required elements\nif (nameMatch && phoneMatch && inquiryMatch) {\n    // Extract the information\n    const name = nameMatch[1].trim();\n    const phone = phoneMatch[1].trim();\n    const inquiry = inquiryMatch[1].trim();\n    \n    // Pass the message to the next node\n    msg.payload = {\n        chatId: messageData.chatId,\n        text: messageData.text,\n        name: name,\n        phone: phone,\n        inquiry: inquiry,\n        isInquiry: true,\n        timestamp: now.toISOString()\n    };\n    \n    return [msg, null];\n} else {\n    // Not an inquiry, pass to second output\n    return [null, msg];\n}\n","outputs":2,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":380,"y":120,"wires":[["e7e3d72952a6a590"],[]]},{"id":"e7e3d72952a6a590","type":"function","z":"314f1f3da6bf8f58","name":"Prepare Transfer","func":"// Get admin numbers from global context or use defaults\nconst adminNumbers = global.get('adminNumbers') || ['85290897701@c.us']; // Default to your number for testing\n\n// Create a copy of the message for each admin\nconst messages = [];\n\n// Create a clean message object for each admin\nfor (const adminNumber of adminNumbers) {\n    const adminMsg = {\n        payload: {\n            body: {\n                chatId: adminNumber,\n                message: `üì© *ÊúâÊñ∞Êü•Ë©¢*\\n\\nüë§ *ÂßìÂêç:* ${msg.payload.name || 'Unknown'}\\nüì± *ÈõªË©±* ${msg.payload.phone || 'Unknown'}\\nüìû *Chat ID:* ${msg.payload.chatId}\\n‚è∞ *ÊôÇÈñì:* ${msg.formattedTime}\\n\\nüí¨ *Êü•Ë©¢‰∫ãÈ†Ö:*\\n${msg.payload.inquiry || msg.payload.text}`\n            }\n        }\n    };\n    messages.push(adminMsg);\n}\n\n// Prepare confirmation message for the customer\nconst confirmMsg = {\n    payload: {\n        body: {\n            chatId: msg.payload.chatId,\n            message: \"Thank you for your inquiry. Our team has been notified and will respond to you shortly.\"\n        }\n    }\n};\n\n// Return all messages\nreturn [messages, confirmMsg];\n","outputs":2,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":590,"y":120,"wires":[["36b29adedbdf7e94"],["400ead594c57b73e"]]},{"id":"36b29adedbdf7e94","type":"split","z":"314f1f3da6bf8f58","name":"Split for each admin","splt":"\\n","spltType":"str","arraySplt":1,"arraySpltType":"len","stream":false,"addname":"","property":"payload","x":800,"y":80,"wires":[["6328b982ddd94905"]]},{"id":"400ead594c57b73e","type":"http request","z":"314f1f3da6bf8f58","d":true,"name":"Send Confirmation","method":"POST","ret":"obj","paytoqs":"ignore","url":"http://localhost:3000/api/workflow/send-message","tls":"","persist":false,"proxy":"","insecureHTTPParser":false,"authType":"","senderr":false,"headers":[],"x":810,"y":160,"wires":[[]]},{"id":"6328b982ddd94905","type":"http request","z":"314f1f3da6bf8f58","name":"Send WhatsApp Message","method":"POST","ret":"obj","paytoqs":"ignore","url":"http://localhost:3000/api/workflow/send-message","tls":"","persist":false,"proxy":"","insecureHTTPParser":false,"authType":"","senderr":false,"headers":[],"x":1030,"y":80,"wires":[[]]},{"id":"c2c594817d25e98a","type":"function","z":"314f1f3da6bf8f58","name":"Configure Admin Numbers","func":"// Set admin numbers in global context\n// These are the WhatsApp numbers that will receive inquiry notifications\n// Format should be full international number with country code, no + sign, followed by @c.us\n// Example: 85212345678@c.us for a Hong Kong number +852 1234 5678\n\nglobal.set('adminNumbers', [\n    '85290897701@c.us',\n    '85294974070@c.us'  // Your WhatsApp number for testing\n]);\n\n// To add more admins, add more numbers in the same format:\n// '85212345678@c.us',  // Another admin\n// '85287654321@c.us'   // Another admin\n\nreturn msg;","outputs":1,"timeout":"","noerr":0,"initialize":"","finalize":"","libs":[],"x":380,"y":60,"wires":[[]]},{"id":"591e64a48c4264fc","type":"inject","z":"314f1f3da6bf8f58","name":"Load Config","props":[{"p":"payload"},{"p":"topic","vt":"str"}],"repeat":"","crontab":"","once":true,"onceDelay":0.1,"topic":"","payload":"","payloadType":"date","x":160,"y":60,"wires":[["c2c594817d25e98a"]]}]