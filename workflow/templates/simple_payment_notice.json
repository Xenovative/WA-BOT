[
    {
        "id": "simple-payment-notice",
        "type": "tab",
        "label": "Simple Payment Notice",
        "disabled": false,
        "info": "Simplified payment notice workflow with Excel/CSV support"
    },
    {
        "id": "pnc-config",
        "type": "function",
        "z": "simple-payment-notice",
        "name": "Payment Config",
        "func": "// Payment configuration\nreturn {\n    payload: {\n        // Schedule (cron format: minute hour day month dayOfWeek)\n        schedule: \"0 9 1 * *\",  // 9 AM on 1st of every month\n        timezone: \"Asia/Kuala_Lumpur\",\n        \n        // File paths\n        spreadsheet_path: \"./data/payments.xlsx\",\n        backup_path: \"./backups/\",\n        \n        // Messages\n        template_message: \"Dear {name}, your payment of RM{amount} is due on {due_date}. Ref: {reference}\",\n        reminder_message: \"REMINDER: {message}\",\n        thank_you_message: \"Thank you for your payment of RM{amount} on {payment_date}.\"\n    }\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 200,
        "y": 80,
        "wires": [["pnc-load-spreadsheet"]]
    },
    {
        "id": "pnc-load-spreadsheet",
        "type": "function",
        "z": "simple-payment-notice",
        "name": "Load Spreadsheet",
        "func": "// Load and process spreadsheet\nconst config = msg.payload;\nconst xlsx = require('xlsx');\n\ntry {\n    // Load workbook\n    const workbook = xlsx.readFile(config.spreadsheet_path);\n    const sheetName = workbook.SheetNames[0];  // Get first sheet\n    const worksheet = workbook.Sheets[sheetName];\n    \n    // Convert to JSON\n    const data = xlsx.utils.sheet_to_json(worksheet);\n    \n    // Add data to message\n    msg.payload = {\n        config: config,\n        data: data,\n        timestamp: new Date().toISOString()\n    };\n    \n    return msg;\n} catch (error) {\n    node.error(\"Error loading spreadsheet: \" + error);\n    msg.error = error;\n    return [null, msg];\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [{"var":"xlsx","module":"xlsx"}],
        "x": 400,
        "y": 80,
        "wires": [["pnc-filter-payments"]]
    },
    {
        "id": "pnc-filter-payments",
        "type": "function",
        "z": "simple-payment-notice",
        "name": "Filter Due Payments",
        "func": "// Filter payments that are due\nconst { config, data } = msg.payload;\nconst now = new Date();\nconst sevenDaysLater = new Date(now);\nsevenDaysLater.setDate(now.getDate() + 7);\n\n// Filter logic\nconst duePayments = data.filter(payment => {\n    const dueDate = new Date(payment.due_date);\n    return dueDate <= sevenDaysLater && payment.status !== 'paid';\n});\n\nmsg.payload = {\n    config: config,\n    payments: duePayments\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 600,
        "y": 80,
        "wires": [["pnc-send-notices"]]
    },
    {
        "id": "pnc-send-notices",
        "type": "function",
        "z": "simple-payment-notice",
        "name": "Send Notices",
        "func": "// Send payment notices\nconst { config, payments } = msg.payload;\n\n// Process each payment\nfor (const payment of payments) {\n    // Format message\n    let message = config.template_message\n        .replace('{name}', payment.name)\n        .replace('{amount}', payment.amount)\n        .replace('{due_date}', payment.due_date)\n        .replace('{reference}', payment.reference);\n    \n    // TODO: Implement actual message sending\n    node.log(\"Sending notice: \" + message);\n    \n    // Mark as notified\n    payment.last_notified = new Date().toISOString();\n}\n\nmsg.payload = {\n    config: config,\n    payments: payments\n};\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 80,
        "wires": [["pnc-update-spreadsheet"]]
    },
    {
        "id": "pnc-update-spreadsheet",
        "type": "function",
        "z": "simple-payment-notice",
        "name": "Update Spreadsheet",
        "func": "// Update spreadsheet with new data\nconst { config, payments } = msg.payload;\nconst xlsx = require('xlsx');\n\ntry {\n    // Load existing workbook\n    const workbook = xlsx.readFile(config.spreadsheet_path);\n    const sheetName = workbook.SheetNames[0];\n    \n    // Convert existing data to JSON\n    const worksheet = workbook.Sheets[sheetName];\n    const data = xlsx.utils.sheet_to_json(worksheet);\n    \n    // Update records\n    const updatedData = data.map(record => {\n        const updatedPayment = payments.find(p => p.reference === record.reference);\n        return updatedPayment || record;\n    });\n    \n    // Convert back to worksheet\n    const newWorksheet = xlsx.utils.json_to_sheet(updatedData);\n    \n    // Update workbook\n    workbook.Sheets[sheetName] = newWorksheet;\n    \n    // Save backup\n    const backupPath = `${config.backup_path}payments_${new Date().toISOString().replace(/[:.]/g, '-')}.xlsx`;\n    xlsx.writeFile(workbook, backupPath);\n    \n    // Save updated file\n    xlsx.writeFile(workbook, config.spreadsheet_path);\n    \n    node.log(`Updated spreadsheet and created backup: ${backupPath}`);\n    return msg;\n    \n} catch (error) {\n    node.error(\"Error updating spreadsheet: \" + error);\n    msg.error = error;\n    return [null, msg];\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [{"var":"xlsx","module":"xlsx"}],
        "x": 1000,
        "y": 80,
        "wires": [[]]
    }
]