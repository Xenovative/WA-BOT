[
  {
    "id": "wa-media-reminder-flow",
    "type": "tab",
    "label": "WhatsApp Media Reminder",
    "disabled": false,
    "info": "Remind WhatsApp users every period until a media file is received (stops on media or after max hours). Triggers via MQTT topics: bot/outgoing (bot prompts) and whatsapp/messages (incoming)."
  },
  {
    "id": "wa-init",
    "type": "inject",
    "z": "wa-media-reminder-flow",
    "name": "Init WA Reminder",
    "props": [
      { "p": "payload" },
      { "p": "topic", "vt": "str" }
    ],
    "repeat": "",
    "crontab": "",
    "once": true,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "x": 170,
    "y": 120,
    "wires": [["wa-set-defaults"]]
  },
  {
    "id": "wa-set-defaults",
    "type": "function",
    "z": "wa-media-reminder-flow",
    "name": "Set Defaults",
    "func": "// Initialize config, keywords, and state containers\nconst defCfg = { periodMin: 30, maxHours: 48 };\n// Multilingual media-request keywords (English + Chinese variants)\nconst defKeywords = [\n  // English\n  'photo','image','picture','pic','screenshot','video','audio','voice',\n  'document','file','media','attachment','upload','send','proof','receipt',\n  // Chinese (Traditional/Simplified)\n  '相片','照片','圖片','截圖','影片','語音','錄音','文件','檔案','媒體',\n  '附件','上載','上傳','發送','发送','傳送','附上','收據','單據','凭证','憑證'\n];\nflow.set('wa.reminder.config', flow.get('wa.reminder.config') || defCfg);\nflow.set('wa.reminder.keywords', flow.get('wa.reminder.keywords') || defKeywords);\nglobal.set('waMediaReminders', global.get('waMediaReminders') || {});\ntry { node.status({ fill: 'blue', shape: 'ring', text: 'initialized defaults' }); node.warn('[WA Reminder] Defaults initialized'); } catch(e) {}\nreturn null;",
    "outputs": 0,
    "noerr": 0,
    "x": 410,
    "y": 120,
    "wires": []
  },
  {
    "id": "wa-bot-out-mqtt",
    "type": "mqtt in",
    "z": "wa-media-reminder-flow",
    "name": "Bot Outgoing (MQTT)",
    "topic": "bot/outgoing",
    "qos": "2",
    "datatype": "json",
    "broker": "broker",
    "nl": false,
    "rap": true,
    "rh": 0,
    "x": 190,
    "y": 200,
    "wires": [["wa-detect-bot-prompts","wa-log-bot-out"]]
  },
  {
    "id": "wa-detect-bot-prompts",
    "type": "function",
    "z": "wa-media-reminder-flow",
    "name": "Detect Bot Media Request",
    "func": "// Start/refresh reminder when bot asks user for media (keyword or requireMedia flag)\n// Flatten payload to support both nested {payload:{...}} and flat shapes\nconst root = (msg && msg.payload && msg.payload.payload) ? msg.payload.payload : (msg && msg.payload) ? msg.payload : {};\n// Extract text/content robustly\nconst text = (root.text || root.message || root.content || root.body || msg.text || msg.message || msg.content || '');\n// Extract platform/chatId/to variants\nlet chatId = root.chatId || root.to || root.toNumber || root.phone || msg.chatId || msg.to;\nlet platform = (root.platform || msg.platform || '').toLowerCase();\n// Infer WhatsApp based on chatId pattern or topic\nconst topic = (typeof msg.topic === 'string' ? msg.topic : '');\nconst waById = chatId && /@c\\.us$/.test(String(chatId));\nconst waByTopic = topic === 'bot/outgoing' || /whatsapp|wa/i.test(platform);\nconst isWhatsApp = (platform === 'whatsapp') || waById || waByTopic;\nif (!isWhatsApp) { try { node.warn(`[WA Reminder] Ignored outgoing (not WA): platform=${platform} chatId=${chatId}`); } catch(e){} return null; }\n// Normalize chatId if only digits provided\nif (!waById && chatId && /^\\d{6,}$/.test(String(chatId))) { chatId = `${chatId}@c.us`; }\n\nconst requireMedia = !!(root.requireMedia === true || (msg.meta && msg.meta.requireMedia === true) || root.require_media === true || root.requireAttachment === true);\nconst kws = flow.get('wa.reminder.keywords') || [];\nconst lower = String(text || '').toLowerCase();\nlet matched = requireMedia || kws.some(k => lower.includes(String(k).toLowerCase()));\n// Lightweight phrase heuristics (e.g., \"send receipt/photo\")\nif (!matched) {\n  const want = /(send|upload|attach|請|请|發|传|傳|上傳|上載)/i.test(lower);\n  const what = /(photo|image|picture|pic|screenshot|video|audio|voice|document|file|media|proof|receipt|相|圖|圖像|照片|截圖|影片|語音|錄音|文件|檔案|媒體|收據|單據|凭证|憑證)/i.test(lower);\n  matched = want && what;\n}\nif (!matched) { try { node.warn(`[WA Reminder] Outgoing did not match media request. chatId=${chatId} text='${(text||'').slice(0,80)}'`); } catch(e){} return null; }\n\nconst cfg = flow.get('wa.reminder.config') || { periodMin: 30, maxHours: 48 };\nconst states = global.get('waMediaReminders') || {};\nconst now = Date.now();\nconst s = states[chatId] || { startedAt: now, lastSentAt: 0, count: 0, active: true };\ns.lastPromptAt = now;\ns.active = true;\ns.periodMs = (cfg.periodMin || 30) * 60000;\ns.maxMs = (cfg.maxHours || 48) * 3600000;\ns.lastBotText = text || '';\nstates[chatId] = s;\nglobal.set('waMediaReminders', states);\n\n// Debug/status\ntry { node.status({ fill: 'blue', shape: 'dot', text: `armed ${chatId}` }); node.warn(`[WA Reminder] Armed/refresh for ${chatId} requireMedia=${requireMedia}`); } catch (e) {}\nreturn null;",
    "outputs": 0,
    "noerr": 0,
    "x": 450,
    "y": 200,
    "wires": []
  },
  {
    "id": "wa-tick",
    "type": "inject",
    "z": "wa-media-reminder-flow",
    "name": "Reminder Tick (60s)",
    "props": [
      { "p": "payload" },
      { "p": "topic", "vt": "str" }
    ],
    "repeat": "60",
    "crontab": "",
    "once": true,
    "onceDelay": 1,
    "topic": "wa_reminder_tick",
    "payload": "tick",
    "payloadType": "str",
    "x": 170,
    "y": 260,
    "wires": [["wa-scheduler","wa-log-tick"]]
  },
  {
    "id": "wa-scheduler",
    "type": "function",
    "z": "wa-media-reminder-flow",
    "name": "Scheduler",
    "func": "// Iterate active chats and emit reminders on cadence until timeout\nconst states = global.get('waMediaReminders') || {};\nconst cfg = flow.get('wa.reminder.config') || { periodMin: 30, maxHours: 48 };\nconst now = Date.now();\nconst out = [];\nlet sent = 0;\nlet active = 0;\nObject.entries(states).forEach(([chatId, s]) => {\n  if (!s || s.active !== true) return;\n  active++;\n  const startedAt = s.startedAt || now;\n  const periodMs = s.periodMs || (cfg.periodMin * 60000);\n  const maxMs = s.maxMs || (cfg.maxHours * 3600000);\n  const elapsed = now - startedAt;\n  if (elapsed >= maxMs) { s.active = false; try { node.warn(`[WA Reminder] Expired window for ${chatId} - deactivating`); } catch(e){} return; }\n  // suppress immediate echo after bot prompt (<= 60s)\n  if (s.lastPromptAt && (now - s.lastPromptAt) < 60000) return;\n  if (!s.lastSentAt || (now - s.lastSentAt) >= periodMs) {\n    const remaining = Math.max(0, maxMs - elapsed);\n    const hrs = Math.floor(remaining / 3600000);\n    const mins = Math.floor((remaining % 3600000) / 60000);\n    const reminder = `\\u23F0 Reminder: Please send the requested media. Remaining window: ${hrs}h ${mins}m.`;\n    out.push({ payload: { chatId, message: reminder, messageType: 'text' } });\n    s.lastSentAt = now;\n    s.count = (s.count || 0) + 1;\n    sent++;\n    try { node.status({ fill: 'green', shape: 'dot', text: `sent ${s.count} to ${chatId}` }); node.warn(`[WA Reminder] Sent #${s.count} to ${chatId} (${hrs}h ${mins}m left)`); } catch(e){}\n  }\n});\nglobal.set('waMediaReminders', states);\ntry { if (!sent) node.status({ fill: 'grey', shape: 'ring', text: 'no sends this tick' }); node.warn(`[WA Reminder] Tick: active=${active}, sent=${sent}`); } catch(e){}\nreturn [out];",
    "outputs": 1,
    "noerr": 0,
    "x": 390,
    "y": 260,
    "wires": [["wa-send-reminder"]]
  },
  {
    "id": "wa-log-tick",
    "type": "debug",
    "z": "wa-media-reminder-flow",
    "name": "Log Tick",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "x": 410,
    "y": 300,
    "wires": []
  },
  {
    "id": "wa-dump-state",
    "type": "inject",
    "z": "wa-media-reminder-flow",
    "name": "Dump Reminder State",
    "props": [
      { "p": "payload" }
    ],
    "repeat": "",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "x": 180,
    "y": 400,
    "wires": [["wa-dump-fn"]]
  },
  {
    "id": "wa-dump-fn",
    "type": "function",
    "z": "wa-media-reminder-flow",
    "name": "Dump State",
    "func": "const states = global.get('waMediaReminders') || {};\ntry { node.warn('[WA Reminder] STATE: ' + JSON.stringify(states)); node.status({ fill: 'blue', shape: 'ring', text: 'dumped state to debug' }); } catch(e) {}\nmsg.payload = states;\nreturn msg;",
    "outputs": 1,
    "noerr": 0,
    "x": 400,
    "y": 400,
    "wires": [["wa-log-state"]]
  },
  {
    "id": "wa-log-state",
    "type": "debug",
    "z": "wa-media-reminder-flow",
    "name": "Log State",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "x": 590,
    "y": 400,
    "wires": []
  },
  {
    "id": "wa-test-bot-prompt",
    "type": "inject",
    "z": "wa-media-reminder-flow",
    "name": "TEST: Bot Prompt (arm)",
    "props": [
      { "p": "payload" }
    ],
    "repeat": "",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "{\n  \"payload\": {\n    \"platform\": \"whatsapp\",\n    \"to\": \"123456789@c.us\",\n    \"text\": \"Please send a photo of your receipt.\",\n    \"requireMedia\": true\n  }\n}",
    "payloadType": "json",
    "x": 210,
    "y": 160,
    "wires": [["wa-detect-bot-prompts"]]
  },
  {
    "id": "wa-test-inbound-media",
    "type": "inject",
    "z": "wa-media-reminder-flow",
    "name": "TEST: Inbound Media (stop)",
    "props": [
      { "p": "payload" }
    ],
    "repeat": "",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "{\n  \"payload\": {\n    \"platform\": \"whatsapp\",\n    \"chatId\": \"123456789@c.us\",\n    \"text\": \"Here you go\",\n    \"hasMedia\": true,\n    \"type\": \"image\"\n  }\n}",
    "payloadType": "json",
    "x": 220,
    "y": 380,
    "wires": [["wa-detect-media"]]
  },
  {
    "id": "wa-send-reminder",
    "type": "http request",
    "z": "wa-media-reminder-flow",
    "name": "Send Reminder (WA)",
    "method": "POST",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "http://localhost:3000/api/workflow/send-message",
    "tls": "",
    "persist": false,
    "proxy": "",
    "authType": "",
    "x": 630,
    "y": 260,
    "wires": [["wa-log-send"]]
  },
  {
    "id": "wa-log-send",
    "type": "debug",
    "z": "wa-media-reminder-flow",
    "name": "Log Reminder Send",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "x": 880,
    "y": 260,
    "wires": []
  },
  {
    "id": "wa-inbound-mqtt",
    "type": "mqtt in",
    "z": "wa-media-reminder-flow",
    "name": "WhatsApp Incoming (MQTT)",
    "topic": "whatsapp/messages",
    "qos": "2",
    "datatype": "json",
    "broker": "broker",
    "nl": false,
    "rap": true,
    "rh": 0,
    "x": 200,
    "y": 340,
    "wires": [["wa-detect-media","wa-log-inbound"]]
  },
  {
    "id": "wa-detect-media",
    "type": "function",
    "z": "wa-media-reminder-flow",
    "name": "Detect Media + Stop",
    "func": "// If inbound has media, stop reminder for that chat and thank user\n// Flatten payload to support both nested {payload:{...}} and flat shapes\nconst root = (msg && msg.payload && msg.payload.payload) ? msg.payload.payload : (msg && msg.payload) ? msg.payload : {};\nconst type = (root.type || (root.message && root.message.type) || '').toLowerCase();\nconst hasMedia = !!(root.hasMedia || (root.message && root.message.hasMedia) || root.media || root.mediaUrl || root.image || root.video || root.audio || root.document);\nconst knownType = ['image','video','audio','document','sticker','voice','ptt'].includes(type);\nconst isMedia = hasMedia || knownType;\nif (!isMedia) return [null, msg];\nconst chatId = root.chatId || msg.chatId || root.from || root.remoteJid;\nif (!chatId) return [null, msg];\nconst states = global.get('waMediaReminders') || {};\nif (states[chatId]) {\n  states[chatId].active = false;\n  states[chatId].stoppedAt = Date.now();\n  global.set('waMediaReminders', states);\n  try { node.status({ fill: 'yellow', shape: 'dot', text: `stopped ${chatId}` }); node.warn(`[WA Reminder] Media received. Stopping reminders for ${chatId}`); } catch(e){}\n  const thank = { payload: { chatId, message: \"✅ Thanks! We've received your media. We'll process it shortly.\", messageType: 'text' } };\n  return [thank, null];\n}\nreturn [null, msg];",
    "outputs": 2,
    "noerr": 0,
    "x": 410,
    "y": 340,
    "wires": [["wa-send-thanks"], ["wa-inbound-pass"]]
  },
  {
    "id": "wa-send-thanks",
    "type": "http request",
    "z": "wa-media-reminder-flow",
    "name": "Send Thanks (WA)",
    "method": "POST",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "http://localhost:3000/api/workflow/send-message",
    "tls": "",
    "persist": false,
    "proxy": "",
    "authType": "",
    "x": 660,
    "y": 320,
    "wires": [["wa-log-thanks"]]
  },
  {
    "id": "wa-log-thanks",
    "type": "debug",
    "z": "wa-media-reminder-flow",
    "name": "Log Thanks",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "x": 870,
    "y": 320,
    "wires": []
  },
  {
    "id": "wa-inbound-pass",
    "type": "debug",
    "z": "wa-media-reminder-flow",
    "name": "Inbound (no media)",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "x": 660,
    "y": 360,
    "wires": []
  },
  {
    "id": "wa-log-bot-out",
    "type": "debug",
    "z": "wa-media-reminder-flow",
    "name": "Log Bot Outgoing (MQTT)",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "x": 460,
    "y": 160,
    "wires": []
  },
  {
    "id": "wa-log-inbound",
    "type": "debug",
    "z": "wa-media-reminder-flow",
    "name": "Log WhatsApp Incoming (MQTT)",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "x": 460,
    "y": 380,
    "wires": []
  },
  {
    "id": "broker",
    "type": "mqtt-broker",
    "name": "Local Broker",
    "broker": "localhost",
    "port": "1883",
    "clientid": "",
    "autoConnect": true,
    "usetls": false,
    "protocolVersion": "4",
    "keepalive": "60",
    "cleansession": true,
    "birthTopic": "",
    "birthQos": "0",
    "birthPayload": "",
    "birthMsg": {},
    "closeTopic": "",
    "closeQos": "0",
    "closePayload": "",
    "closeMsg": {},
    "willTopic": "",
    "willQos": "0",
    "willPayload": "",
    "willMsg": {},
    "sessionExpiry": ""
  }
]
