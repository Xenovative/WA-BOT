[
    {
        "id": "payment-reminder-flow",
        "type": "tab",
        "label": "Payment Reminder & Confirmation",
        "disabled": false,
        "info": "Simplified payment reminder and confirmation workflow"
    },
    {
        "id": "reminder-schedule",
        "type": "inject",
        "z": "payment-reminder-flow",
        "name": "Daily at 10 AM",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "0 10 * * *",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "send.reminders",
        "payload": "",
        "payloadType": "date",
        "x": 210,
        "y": 100,
        "wires": [["get-pending-payments"]]
    },
    {
        "id": "get-pending-payments",
        "type": "function",
        "z": "payment-reminder-flow",
        "name": "Get Pending Payments",
        "func": "// Get pending payments that need reminders\nconst pendingPayments = context.get('pendingPayments') || [];\nconst now = new Date();\nconst remindersToSend = [];\n\npendingPayments.forEach(payment => {\n    const lastReminder = payment.lastReminder ? new Date(payment.lastReminder) : null;\n    const interval = payment.reminderInterval || 24 * 60 * 60 * 1000; // Default 24h\n    \n    if (!lastReminder || (now - lastReminder) >= interval) {\n        remindersToSend.push(payment);\n        payment.lastReminder = now.toISOString();\n    }\n});\n\ncontext.set('pendingPayments', pendingPayments);\nreturn { payload: remindersToSend };",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 430,
        "y": 100,
        "wires": [["send-reminders"]]
    },
    {
        "id": "send-reminders",
        "type": "function",
        "z": "payment-reminder-flow",
        "name": "Send Reminders",
        "func": "// Send reminders for each pending payment\nconst reminders = msg.payload;\nconst sentReminders = [];\n\nreminders.forEach(reminder => {\n    const message = {\n        chatId: reminder.phoneNumber,\n        message: \"ðŸ”” *Payment Reminder*\\\\n\\\\n\" + \n                \"Dear \" + (reminder.customerName || 'Valued Customer') + \",\\\\n\\\\n\" + \n                \"This is a friendly reminder about your payment of *$\" + (reminder.amount || '0.00') + \"*.\\\\n\" + \n                \"*Due date:* \" + (reminder.dueDate || 'as soon as possible') + \"\\\\n\\\\n\" + \n                \"Please make the payment at your earliest convenience.\\\\n\" + \n                \"Thank you for your attention to this matter.\"\n    };\n    sentReminders.push(message);\n});\n\nreturn { payload: sentReminders };",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 100,
        "wires": [["whatsapp-out"]]
    },
    {
        "id": "whatsapp-in",
        "type": "mqtt in",
        "z": "payment-reminder-flow",
        "name": "WhatsApp Incoming",
        "topic": "whatsapp/messages",
        "qos": "2",
        "datatype": "json",
        "broker": "broker",
        "nl": false,
        "rap": true,
        "rh": 0,
        "inputs": 0,
        "x": 170,
        "y": 200,
        "wires": [["check-payment-proof"]]
    },
    {
        "id": "check-payment-proof",
        "type": "switch",
        "z": "payment-reminder-flow",
        "name": "Has Payment Proof?",
        "property": "payload.hasMedia",
        "propertyType": "msg",
        "rules": [
            {
                "t": "true"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 370,
        "y": 200,
        "wires": [["acknowledge-payment"]]
    },
    {
        "id": "acknowledge-payment",
        "type": "function",
        "z": "payment-reminder-flow",
        "name": "Acknowledge Payment",
        "func": "// Acknowledge payment and forward to admin\n// Get admin numbers from global context (configured in the Configure Admin Numbers node)\nconst adminNumbers = global.get('adminNumbers') || [];\n\nif (adminNumbers.length === 0) {\n    node.warn('No admin numbers configured. Payment will not be forwarded.');\n    return null;\n}\n\nconst payment = {\n    from: msg.payload.from,\n    timestamp: new Date().toISOString(),\n    media: msg.payload.media\n};\n\n// Send acknowledgment to customer\nconst ackMessage = {\n    chatId: msg.payload.chatId,\n    message: \"âœ… Payment received! We're processing your payment confirmation. Thank you!\"\n};\n\n// Forward to all admin numbers\nconst adminMessages = adminNumbers.map(adminNumber => ({\n    chatId: adminNumber,\n    message: `ðŸ“¨ New Payment Proof Received\n\nFrom: ${msg.payload.from}\nTime: ${new Date().toLocaleString()}\nChat ID: ${msg.payload.chatId}`,    \n    media: msg.payload.media\n}));\n\n// Return acknowledgment to customer and all admin messages\nreturn [\n    {...msg, payload: ackMessage},\n    ...adminMessages.map(adminMsg => ({payload: adminMsg}))\n];",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 590,
        "y": 200,
        "wires": [["whatsapp-out"], ["whatsapp-out"]]
    },
    {
        "id": "whatsapp-out",
        "type": "http request",
        "z": "payment-reminder-flow",
        "name": "WhatsApp Out",
        "method": "POST",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "http://localhost:3000/api/workflow/send-message",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "x": 850,
        "y": 160,
        "wires": [["log-activity"]]
    },
    {
        "id": "log-activity",
        "type": "debug",
        "z": "payment-reminder-flow",
        "name": "Log Activity",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1070,
        "y": 160,
        "wires": []
    },
    {
        "id": "test-trigger",
        "type": "inject",
        "z": "payment-reminder-flow",
        "name": "Test Payment Reminder",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "test.reminder",
        "payload": "{\"phoneNumber\":\"1234567890\",\"customerName\":\"Test Customer\",\"amount\":100,\"dueDate\":\"2025-07-10\"}",
        "payloadType": "json",
        "x": 210,
        "y": 280,
        "wires": [
            ["test-send-reminder"]
        ]
    },
    {
        "id": "test-send-reminder",
        "type": "function",
        "z": "payment-reminder-flow",
        "name": "Prepare Test Reminder",
        "func": "// Prepare test reminder message\nconst testData = msg.payload;\nconst message = {\n    chatId: testData.phoneNumber,\n    message: 'ðŸ”” Test Payment Reminder\\n\\n' + \n            'Dear ' + (testData.customerName || 'Test Customer') + ',\\n\\n' + \n            'This is a test payment reminder for $' + (testData.amount || '0.00') + '.\\n' + \n            'Due date: ' + (testData.dueDate || 'the due date') + '\\n\\n' + \n            'This is a test message. Please ignore.'\n};\n\nreturn {payload: message};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 420,
        "y": 280,
        "wires": [
            ["whatsapp-out"]
        ]
    },
    {
        "id": "test-payment-received",
        "type": "inject",
        "z": "payment-reminder-flow",
        "name": "Test Payment Received",
        "props": [
            {
                "p": "payload"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"chatId\":\"1234567890\",\"from\":\"Test User\",\"hasMedia\":true,\"media\":{\"url\":\"test-receipt.jpg\"},\"text\":\"Here's my payment proof\"}",
        "payloadType": "json",
        "x": 210,
        "y": 380,
        "wires": [
            ["check-payment-proof"]
        ]
    },
    {
        "id": "configure-admin-numbers",
        "type": "function",
        "z": "payment-reminder-flow",
        "name": "Configure Admin Numbers",
        "func": "// Set admin numbers in global context\n// These are the WhatsApp numbers that will receive payment notifications\n// Format: full international number with country code, no + sign, followed by @c.us\n// Example: 85212345678@c.us for a Hong Kong number +852 1234 5678\n\nglobal.set('adminNumbers', [\n    '85290897701@c.us',  // Example admin number\n    '85294974070@c.us'   // Another admin\n]);\n\n// To add more admins, add more numbers in the same format\n// '85212345678@c.us',  // Another admin\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 40,
        "wires": [[]]
    },
    {
        "id": "configure-clients",
        "type": "function",
        "z": "payment-reminder-flow",
        "name": "Configure Client Reminders",
        "func": "// Set up client payment reminders\n// Each client needs: phoneNumber, customerName, amount, paymentSchedule, reminderInterval\n\nconst clients = [\n    {\n        phoneNumber: '85212345678@c.us',  // Client's WhatsApp number\n        customerName: 'John Doe',\n        amount: 1000.00,\n        paymentSchedule: {\n            type: 'monthly',    // 'weekly', 'biweekly', 'monthly', 'quarterly'\n            day: 15,            // Day of month (1-31) or day of week (0-6, 0=Sunday)\n            startDate: '2025-07-15'  // First payment date\n        },\n        reminderInterval: '24h'  // Options: '12h', '24h', '2d', '3d', '1w'\n    },\n    // Add more clients as needed\n    // {\n    //     phoneNumber: '85287654321@c.us',\n    //     customerName: 'Jane Smith',\n    //     amount: 2000.00,\n    //     paymentSchedule: {\n    //         type: 'weekly',\n    //         day: 1,  // Monday\n    //         startDate: '2025-07-15'\n    //     },\n    //     reminderInterval: '24h'\n    // }\n];\n\n// Convert human-readable intervals to milliseconds\nconst intervalMap = {\n    '12h': 12 * 60 * 60 * 1000,\n    '24h': 24 * 60 * 60 * 1000,\n    '2d': 2 * 24 * 60 * 60 * 1000,\n    '3d': 3 * 24 * 60 * 60 * 1000,\n    '1w': 7 * 24 * 60 * 60 * 1000\n};\n\n// Calculate next payment date based on schedule\nfunction getNextPaymentDate(schedule) {\n    const now = new Date();\n    let nextDate = new Date(schedule.startDate);\n    \n    // If start date is in the past, calculate next occurrence\n    while (nextDate < now) {\n        const newDate = new Date(nextDate);\n        switch (schedule.type) {\n            case 'weekly':\n                newDate.setDate(newDate.getDate() + 7);\n                break;\n            case 'biweekly':\n                newDate.setDate(newDate.getDate() + 14);\n                break;\n            case 'monthly':\n                newDate.setMonth(newDate.getMonth() + 1);\n                break;\n            case 'quarterly':\n                newDate.setMonth(newDate.getMonth() + 3);\n                break;\n            default:\n                newDate.setDate(newDate.getDate() + 1);\n        }\n        nextDate = newDate;\n    }\n    \n    return nextDate.toISOString().split('T')[0]; // Return as YYYY-MM-DD\n}\n\n// Process clients and calculate next payment dates\nconst processedClients = clients.map(client => ({\n    ...client,\n    dueDate: getNextPaymentDate(client.paymentSchedule),\n    reminderInterval: intervalMap[client.reminderInterval] || intervalMap['24h'],\n    nextCheck: Date.now()\n}));\n\n// Store in flow context for the reminder system\ncontext.set('pendingPayments', processedClients);\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 390,
        "y": 40,
        "wires": [[]]
    },
    {
        "id": "load-config",
        "type": "inject",
        "z": "payment-reminder-flow",
        "name": "Load Configuration",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 180,
        "y": 40,
        "wires": [
            ["configure-admin-numbers", "configure-clients"]
        ]
    },
    {
        "id": "broker",
        "type": "mqtt-broker",
        "name": "Local Broker",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansent": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "sessionExpiry": ""
    }
]
