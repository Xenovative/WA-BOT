[
  {
    "id": "wa-group-payment-reminder-flow",
    "type": "tab",
    "label": "WhatsApp Group Payment Reminder",
    "disabled": false,
    "info": "Send payment reminders in group chats and DM each tenant who replies with confirmation. Triggers via MQTT topics: bot/outgoing (group prompts) and whatsapp/messages (inbound group replies)."
  },
  {
    "id": "gp-init",
    "type": "inject",
    "z": "wa-group-payment-reminder-flow",
    "name": "Init Group Payment",
    "props": [
      { "p": "payload" },
      { "p": "topic", "vt": "str" }
    ],
    "repeat": "",
    "crontab": "",
    "once": true,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "x": 180,
    "y": 120,
    "wires": [["gp-set-defaults","gp-config-file-in"]]
  },
  {
    "id": "gp-set-defaults",
    "type": "function",
    "z": "wa-group-payment-reminder-flow",
    "name": "Set Defaults",
    "func": "// Initialize config, keywords, admins, lang, templates, payment, and state containers\nconst defCfg = { periodMin: 1440, maxHours: 168 }; // default: daily, 7 days window\nconst defKeywords = [\n  // English\n  'rent','payment','pay','due','bill','invoice','deposit','utility','utilities',\n  // Chinese (Traditional/Simplified)\n  '租','房租','租金','繳費','缴费','付款','支付','水電','水电','押金'\n];\nflow.set('wa.gp.config', flow.get('wa.gp.config') || defCfg);\nflow.set('wa.gp.keywords', flow.get('wa.gp.keywords') || defKeywords);\nflow.set('wa.gp.admins', flow.get('wa.gp.admins') || []); // e.g., ['1234567890@c.us']\nflow.set('wa.gp.groups', flow.get('wa.gp.groups') || []);\nflow.set('wa.gp.lang', flow.get('wa.gp.lang') || 'en');\nflow.set('wa.gp.templatesByLang', flow.get('wa.gp.templatesByLang') || {});\nflow.set('wa.gp.templates', flow.get('wa.gp.templates') || {}); // backward-compat fallback\nflow.set('wa.gp.payment', flow.get('wa.gp.payment') || {});\n\nconst states = global.get('waGroupPayments') || {};\nconst cfg = flow.get('wa.gp.config') || defCfg;\nconst groups = flow.get('wa.gp.groups') || [];\nconst defLang = flow.get('wa.gp.lang') || 'en';\nconst defPayment = flow.get('wa.gp.payment') || {};\nconst now = Date.now();\nif (Array.isArray(groups) && groups.length) {\n  groups.forEach(g => {\n    let id = null, glang = defLang, gpay = defPayment;\n    if (typeof g === 'string') { id = g; }\n    else if (g && typeof g === 'object') { id = g.id || g.groupId || g.chatId || null; glang = g.lang || defLang; gpay = (g.payment && typeof g.payment === 'object') ? g.payment : defPayment; }\n    if (!id || typeof id !== 'string') return;\n    const s = states[id] || { startedAt: now, lastSentAt: 0, count: 0, active: true, membersConfirmed: {} };\n    s.active = true;\n    s.startedAt = s.startedAt || now;\n    s.periodMs = (cfg.periodMin || 1440) * 60000;\n    s.maxMs = (cfg.maxHours || 168) * 3600000;\n    s.lang = s.lang || glang;\n    s.payment = s.payment || gpay;\n    states[id] = s;\n  });\n}\n\nglobal.set('waGroupPayments', states);\ntry { const admins = (flow.get('wa.gp.admins')||[]).length; const gs = (flow.get('wa.gp.groups')||[]).length; node.status({ fill: 'blue', shape: 'ring', text: `defaults (admins:${admins}, groups:${gs})` }); node.warn(`[WA GroupPay] Defaults initialized (admins:${admins}, groups:${gs})`); } catch(e) {}\nreturn null;",
    "outputs": 0,
    "noerr": 0,
    "x": 430,
    "y": 120,
    "wires": []
  },
  {
    "id": "gp-bot-out-mqtt",
    "type": "mqtt in",
    "z": "wa-group-payment-reminder-flow",
    "name": "Bot Outgoing (MQTT)",
    "topic": "bot/outgoing",
    "qos": "2",
    "datatype": "json",
    "broker": "broker",
    "nl": false,
    "rap": true,
    "rh": 0,
    "x": 190,
    "y": 180,
    "wires": [["gp-detect-group-prompt","gp-log-bot-out"]]
  },
  {
    "id": "gp-detect-group-prompt",
    "type": "function",
    "z": "wa-group-payment-reminder-flow",
    "name": "Detect Group Payment Prompt",
    "func": "// Arm/refresh group reminder when bot posts in a group about payment\n// Flatten payload (supports {payload:{...}} and flat shapes)\nconst root = (msg && msg.payload && msg.payload.payload) ? msg.payload.payload : (msg && msg.payload) ? msg.payload : {};\nlet chatId = root.chatId || root.to || root.toNumber || root.phone || msg.chatId || msg.to;\nconst platform = (root.platform || msg.platform || '').toLowerCase();\nconst text = String(root.text || root.message || root.content || root.body || msg.text || msg.message || msg.content || '');\nconst isGroup = !!(chatId && /@g\\.us$/.test(String(chatId)));\nif (!isGroup) { return null; }\nconst cfg = flow.get('wa.gp.config') || { periodMin: 1440, maxHours: 168 };\nconst kws = flow.get('wa.gp.keywords') || [];\nconst requirePayment = !!(root.requirePayment === true || root.require_payment === true || (msg.meta && msg.meta.requirePayment === true));\nconst lower = text.toLowerCase();\nlet matched = requirePayment || kws.some(k => lower.includes(String(k).toLowerCase()));\nif (!matched) {\n  const want = /(pay|paid|payment|due|remind|rent|invoice|bill|請|请|繳|缴|付|支付|租)/i.test(lower);\n  matched = want;\n}\nif (!matched) { try { node.warn(`[WA GroupPay] Outgoing not a payment prompt. groupId=${chatId} text='${text.slice(0,80)}'`); } catch(e){} return null; }\nconst states = global.get('waGroupPayments') || {};\nconst now = Date.now();\nconst s = states[chatId] || { startedAt: now, lastSentAt: 0, count: 0, active: true, membersConfirmed: {} };\n// attach per-group config if known\nconst groups = flow.get('wa.gp.groups') || [];\nconst defLang = flow.get('wa.gp.lang') || 'en';\nconst defPayment = flow.get('wa.gp.payment') || {};\nlet glang = defLang;\nlet gpay = defPayment;\nfor (const g of groups) {\n  if (typeof g === 'string') { if (g === chatId) { glang = defLang; gpay = defPayment; break; } }\n  else if (g && typeof g === 'object') { const id = g.id || g.groupId || g.chatId; if (id === chatId) { glang = g.lang || defLang; gpay = (g.payment && typeof g.payment === 'object') ? g.payment : defPayment; break; } }\n}\ns.lastPromptAt = now;\ns.active = true;\ns.periodMs = (cfg.periodMin || 1440) * 60000;\ns.maxMs = (cfg.maxHours || 168) * 3600000;\ns.lastBotText = text || '';\ns.lang = s.lang || glang;\ns.payment = s.payment || gpay;\nstates[chatId] = s;\nglobal.set('waGroupPayments', states);\ntry { node.status({ fill: 'blue', shape: 'dot', text: `armed ${chatId}` }); node.warn(`[WA GroupPay] Armed/refresh for ${chatId}`); } catch (e) {}\nreturn null;",
    "outputs": 0,
    "noerr": 0,
    "x": 470,
    "y": 180,
    "wires": []
  },
  {
    "id": "gp-tick",
    "type": "inject",
    "z": "wa-group-payment-reminder-flow",
    "name": "Reminder Tick (60s)",
    "props": [
      { "p": "payload" },
      { "p": "topic", "vt": "str" }
    ],
    "repeat": "60",
    "crontab": "",
    "once": true,
    "onceDelay": 1,
    "topic": "wa_group_payment_tick",
    "payload": "tick",
    "payloadType": "str",
    "x": 180,
    "y": 240,
    "wires": [["gp-scheduler","gp-log-tick"]]
  },
  {
    "id": "gp-scheduler",
    "type": "function",
    "z": "wa-group-payment-reminder-flow",
    "name": "Scheduler",
    "func": "// Iterate active groups and emit reminders on cadence until timeout\nconst states = global.get('waGroupPayments') || {};\nconst cfg = flow.get('wa.gp.config') || { periodMin: 1440, maxHours: 168 };\nconst now = Date.now();\nconst out = [];\nlet sent = 0;\nlet active = 0;\nObject.entries(states).forEach(([groupId, s]) => {\n  if (!s || s.active !== true) return;\n  active++;\n  const startedAt = s.startedAt || now;\n  const periodMs = s.periodMs || (cfg.periodMin * 60000);\n  const maxMs = s.maxMs || (cfg.maxHours * 3600000);\n  const elapsed = now - startedAt;\n  if (elapsed >= maxMs) { s.active = false; try { node.warn(`[WA GroupPay] Expired window for ${groupId} - deactivating`); } catch(e){} return; }\n  // suppress immediate echo after bot prompt (<= 60s)\n  if (s.lastPromptAt && (now - s.lastPromptAt) < 60000) return;\n  if (!s.lastSentAt || (now - s.lastSentAt) >= periodMs) {\n    const remaining = Math.max(0, maxMs - elapsed);\n    const days = Math.floor(remaining / 86400000);\n    const hrs = Math.floor((remaining % 86400000) / 3600000);\n    const lang = s.lang || flow.get('wa.gp.lang') || 'en';\n    const tBy = flow.get('wa.gp.templatesByLang') || {};\n    const tpls = (tBy[lang] || flow.get('wa.gp.templates') || {});\n    const pay = s.payment || flow.get('wa.gp.payment') || {};\n    const bank = pay.bankName || '';\n    const account = pay.bankAccount || '';\n    const amountNum = Number(pay.rentAmount || 0);\n    const currency = pay.currency || '';\n    const formatAmount = (n) => { try { return Number(n).toLocaleString(lang.startsWith('zh') ? 'zh-Hant' : 'en-US'); } catch(e) { return String(n); } };\n    const amountStr = currency ? `${currency}${formatAmount(amountNum)}` : formatAmount(amountNum);\n    let reminder = tpls.reminder || (lang.startsWith('zh') ? '⏰ 房租繳費提醒\\n• 金額：{amountStr}\\n• 匯款：{bank}（{account}）\\n• 剩餘時間：{days}天 {hours}小時\\n請在群組回覆，我會私訊確認。' : '\\u23F0 Rent Reminder\\n• Amount: {amountStr}\\n• Pay to: {bank} ({account})\\n• Window remaining: {days}d {hours}h\\nPlease reply here; I\\'ll DM to confirm.');\n    reminder = String(reminder)\n      .replace('{days}', days)\n      .replace('{hours}', hrs)\n      .replace('{bank}', bank)\n      .replace('{account}', account)\n      .replace('{amountStr}', amountStr);\n    out.push({ payload: { chatId: groupId, message: reminder, messageType: 'text' } });\n    s.lastSentAt = now;\n    s.count = (s.count || 0) + 1;\n    sent++;\n    try { node.status({ fill: 'green', shape: 'dot', text: `sent ${s.count} to ${groupId}` }); node.warn(`[WA GroupPay] Sent #${s.count} to ${groupId} (${days}d ${hrs}h left)`); } catch(e){}\n  }\n});\nglobal.set('waGroupPayments', states);\ntry { if (!sent) node.status({ fill: 'grey', shape: 'ring', text: 'no sends this tick' }); node.warn(`[WA GroupPay] Tick: active=${active}, sent=${sent}`); } catch(e){}\nreturn [out];",
    "outputs": 1,
    "noerr": 0,
    "x": 410,
    "y": 240,
    "wires": [["gp-send-reminder"]]
  },
  {
    "id": "gp-log-tick",
    "type": "debug",
    "z": "wa-group-payment-reminder-flow",
    "name": "Log Tick",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "x": 430,
    "y": 280,
    "wires": []
  },
  {
    "id": "gp-send-reminder",
    "type": "http request",
    "z": "wa-group-payment-reminder-flow",
    "name": "Send Reminder (Group)",
    "method": "POST",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "http://localhost:3000/api/workflow/send-message",
    "tls": "",
    "persist": false,
    "proxy": "",
    "authType": "",
    "x": 660,
    "y": 240,
    "wires": [["gp-log-send"]]
  },
  {
    "id": "gp-log-send",
    "type": "debug",
    "z": "wa-group-payment-reminder-flow",
    "name": "Log Group Reminder Send",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "x": 920,
    "y": 240,
    "wires": []
  },
  {
    "id": "gp-inbound-mqtt",
    "type": "mqtt in",
    "z": "wa-group-payment-reminder-flow",
    "name": "WhatsApp Incoming (MQTT)",
    "topic": "whatsapp/messages",
    "qos": "2",
    "datatype": "json",
    "broker": "broker",
    "nl": false,
    "rap": true,
    "rh": 0,
    "x": 200,
    "y": 340,
    "wires": [["gp-detect-group-reply","gp-log-inbound"]]
  },
  {
    "id": "gp-detect-group-reply",
    "type": "function",
    "z": "wa-group-payment-reminder-flow",
    "name": "Detect Group Replies + DM + Forward",
    "func": "// On inbound group messages, DM the author if confirm/proof, and forward media proofs to admins\nconst root = (msg && msg.payload && msg.payload.payload) ? msg.payload.payload : (msg && msg.payload) ? msg.payload : {};\nconst groupId = root.chatId || msg.chatId;\nconst isGroup = !!(root.isGroup || (groupId && /@g\\.us$/.test(String(groupId))));\nif (!isGroup) return [null, null, msg];\nconst author = root.author || null;\nconst text = String(root.text || root.body || '');\nconst messageId = root.messageId || null;\nconst hasMedia = !!root.hasMedia;\nif (!author || !/@c\\.us$/.test(String(author))) return [null, null, msg];\n// Confirmation heuristics\nconst lower = text.toLowerCase();\nconst confirm = /(paid|done|transferred|transfer|sent|completed|ok|okay|confirm|confirmed|收|已付|已支付|已繳|已缴|轉了|转了|已轉|已转|已交)/i.test(lower);\nconst shouldDM = confirm || hasMedia;\nif (!shouldDM) return [null, null, msg];\n// State + per-group lang/templates\nconst states = global.get('waGroupPayments') || {};\nconst s = states[groupId] || null;\nconst lang = (s && s.lang) || flow.get('wa.gp.lang') || 'en';\nconst tBy = flow.get('wa.gp.templatesByLang') || {};\nconst tpls = (tBy[lang] || flow.get('wa.gp.templates') || {});\n// Update state confirmations\nif (s) { s.membersConfirmed = s.membersConfirmed || {}; s.membersConfirmed[author] = { at: Date.now(), text, hasMedia, messageId }; states[groupId] = s; global.set('waGroupPayments', states); }\n// Compose DM with template\nlet monthStr;\nif (lang.startsWith('zh')) { const d = new Date(); monthStr = `${d.getFullYear()}年${d.getMonth()+1}月`; } else { monthStr = new Date().toLocaleString('en-US', { month: 'long', year: 'numeric' }); }\nlet dmText = tpls.dmConfirm || (lang.startsWith('zh') ? '✅ 感謝！已為您記錄 {month} 的繳費。' : `✅ Thanks! Recorded your payment confirmation for {month}.`);\ndmText = String(dmText).replace('{month}', monthStr);\nconst dm = { payload: { chatId: author, message: dmText, messageType: 'text' } };\n// Prepare admin forward if proof/confirmation exists and admins configured\nlet forward = null;\nconst admins = flow.get('wa.gp.admins') || [];\nif ((hasMedia || confirm) && messageId && admins.length > 0) {\n  let noteTpl = hasMedia ? (tpls.forwardNoteProof || (lang.startsWith('zh') ? '來自 {group} 的 {author} 上傳了繳費證明' : 'Payment proof from {author} in {group}')) : (tpls.forwardNoteText || (lang.startsWith('zh') ? '來自 {group} 的 {author} 回覆了已繳費' : 'Payment confirmation from {author} in {group}'));\n  const note = String(noteTpl).replace('{author}', author).replace('{group}', groupId);\n  forward = { payload: { messageId, recipients: admins, note } };\n} else if ((hasMedia || confirm) && admins.length === 0) {\n  try { node.warn('[WA GroupPay] Proof/confirmation detected but no admins configured in flow context wa.gp.admins'); } catch(e){}\n}\nreturn [dm, forward, null];",
    "outputs": 3,
    "noerr": 0,
    "x": 470,
    "y": 340,
    "wires": [["gp-send-dm-confirm"], ["gp-forward-proof"], ["gp-inbound-pass"]]
  },
  {
    "id": "gp-send-dm-confirm",
    "type": "http request",
    "z": "wa-group-payment-reminder-flow",
    "name": "Send DM Confirm",
    "method": "POST",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "http://localhost:3000/api/workflow/send-message",
    "tls": "",
    "persist": false,
    "proxy": "",
    "authType": "",
    "x": 700,
    "y": 320,
    "wires": [["gp-log-dm"]]
  },
  {
    "id": "gp-log-dm",
    "type": "debug",
    "z": "wa-group-payment-reminder-flow",
    "name": "Log DM",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "x": 900,
    "y": 320,
    "wires": []
  },
  {
    "id": "gp-inbound-pass",
    "type": "debug",
    "z": "wa-group-payment-reminder-flow",
    "name": "Inbound (no confirm)",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "x": 710,
    "y": 360,
    "wires": []
  },
  {
    "id": "gp-forward-proof",
    "type": "http request",
    "z": "wa-group-payment-reminder-flow",
    "name": "Forward Proof to Admins",
    "method": "POST",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "http://localhost:3000/api/workflow/forward-proof",
    "tls": "",
    "persist": false,
    "proxy": "",
    "authType": "",
    "x": 740,
    "y": 400,
    "wires": [["gp-log-forward"]]
  },
  {
    "id": "gp-log-forward",
    "type": "debug",
    "z": "wa-group-payment-reminder-flow",
    "name": "Log Forward",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "x": 960,
    "y": 400,
    "wires": []
  },
  {
    "id": "gp-log-bot-out",
    "type": "debug",
    "z": "wa-group-payment-reminder-flow",
    "name": "Log Bot Outgoing (MQTT)",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "x": 470,
    "y": 140,
    "wires": []
  },
  {
    "id": "gp-log-inbound",
    "type": "debug",
    "z": "wa-group-payment-reminder-flow",
    "name": "Log WhatsApp Incoming (MQTT)",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "x": 470,
    "y": 380,
    "wires": []
  },
  {
    "id": "gp-configure-inject",
    "type": "inject",
    "z": "wa-group-payment-reminder-flow",
    "name": "Configure GroupPay (one-click)",
    "props": [
      { "p": "payload" }
    ],
    "repeat": "",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "{\n  \"lang\": \"en\",\n  \"groups\": [\n    {\n      \"id\": \"1203630XXXXXXXXXXX@g.us\",\n      \"lang\": \"zh-Hant\",\n      \"payment\": {\n        \"bankName\": \"ABC Bank\",\n        \"bankAccount\": \"123-456-789-001\",\n        \"rentAmount\": 10000,\n        \"currency\": \"HK$\"\n      }\n    },\n    {\n      \"id\": \"1203630YYYYYYYYYYY@g.us\",\n      \"lang\": \"en\",\n      \"payment\": {\n        \"bankName\": \"XYZ Bank\",\n        \"bankAccount\": \"987-654-321-000\",\n        \"rentAmount\": 1500,\n        \"currency\": \"US$\"\n      }\n    }\n  ],\n  \"admins\": [\n    \"1234567890@c.us\"\n  ],\n  \"payment\": {\n    \"bankName\": \"ABC Bank\",\n    \"bankAccount\": \"123-456-789-001\",\n    \"rentAmount\": 10000,\n    \"currency\": \"HK$\"\n  },\n  \"templatesByLang\": {\n    \"en\": {\n      \"reminder\": \"\\u23F0 Rent Reminder\\n• Amount: {amountStr}\\n• Pay to: {bank} ({account})\\n• Window remaining: {days}d {hours}h\\nPlease reply here; I'll DM to confirm.\",\n      \"dmConfirm\": \"✅ Thanks! Recorded your payment for {month}.\",\n      \"forwardNoteProof\": \"Payment proof from {author} in {group}\",\n      \"forwardNoteText\": \"Payment confirmation from {author} in {group}\"\n    },\n    \"zh-Hant\": {\n      \"reminder\": \"⏰ 房租繳費提醒\\n• 金額：{amountStr}\\n• 匯款：{bank}（{account}）\\n• 剩餘時間：{days}天 {hours}小時\\n請在群組回覆，我會私訊確認。\",\n      \"dmConfirm\": \"✅ 感謝！已為您記錄 {month} 的繳費。\",\n      \"forwardNoteProof\": \"來自 {group} 的 {author} 上傳了繳費證明\",\n      \"forwardNoteText\": \"來自 {group} 的 {author} 回覆了已繳費\"\n    }\n  },\n  \"templates\": {\n    \"reminder\": \"\\u23F0 Rent Reminder\\n• Amount: {amountStr}\\n• Pay to: {bank} ({account})\\n• Window remaining: {days}d {hours}h\\nPlease reply here; I'll DM to confirm.\",\n    \"dmConfirm\": \"✅ Thanks! Recorded your payment for {month}.\",\n    \"forwardNoteProof\": \"Payment proof from {author} in {group}\",\n    \"forwardNoteText\": \"Payment confirmation from {author} in {group}\"\n  },\n  \"config\": {\n    \"periodMin\": 1440,\n    \"maxHours\": 168\n  },\n  \"arm\": true\n}",
    "payloadType": "json",
    "x": 210,
    "y": 20,
    "wires": [["gp-apply-config"]]
  },
  {
    "id": "gp-apply-config",
    "type": "function",
    "z": "wa-group-payment-reminder-flow",
    "name": "Apply Config (all-in-one)",
    "func": "const cfg = msg && msg.payload ? msg.payload : {};\nconst ensureArr = v => Array.isArray(v) ? v : [];\nconst ensureObj = v => (v && typeof v === 'object') ? v : {};\nconst groups = ensureArr(cfg.groups);\nconst admins = ensureArr(cfg.admins);\nconst templates = ensureObj(cfg.templates); // fallback\nconst templatesByLang = ensureObj(cfg.templatesByLang);\nconst payment = ensureObj(cfg.payment);\nconst lang = typeof cfg.lang === 'string' ? cfg.lang : (flow.get('wa.gp.lang') || 'en');\nconst timing = ensureObj(cfg.config);\nif (Object.keys(timing).length) {\n  const cur = flow.get('wa.gp.config') || {};\n  flow.set('wa.gp.config', { periodMin: timing.periodMin ?? cur.periodMin ?? 1440, maxHours: timing.maxHours ?? cur.maxHours ?? 168 });\n}\nflow.set('wa.gp.groups', groups);\nflow.set('wa.gp.admins', admins);\nflow.set('wa.gp.lang', lang);\nflow.set('wa.gp.templatesByLang', templatesByLang);\nflow.set('wa.gp.templates', templates); // compat\nflow.set('wa.gp.payment', payment);\n// optionally arm\nif (cfg.arm === true) {\n  const states = global.get('waGroupPayments') || {};\n  const conf = flow.get('wa.gp.config') || { periodMin: 1440, maxHours: 168 };\n  const defLang = flow.get('wa.gp.lang') || 'en';\n  const defPayment = flow.get('wa.gp.payment') || {};\n  const now = Date.now();\n  groups.forEach(g => {\n    let id = null, glang = defLang, gpay = defPayment;\n    if (typeof g === 'string') { id = g; }\n    else if (g && typeof g === 'object') { id = g.id || g.groupId || g.chatId || null; glang = g.lang || defLang; gpay = (g.payment && typeof g.payment === 'object') ? g.payment : defPayment; }\n    if (!id || typeof id !== 'string') return;\n    const s = states[id] || { startedAt: now, lastSentAt: 0, count: 0, active: true, membersConfirmed: {} };\n    s.active = true;\n    s.startedAt = s.startedAt || now;\n    s.periodMs = (conf.periodMin || 1440) * 60000;\n    s.maxMs = (conf.maxHours || 168) * 3600000;\n    s.lang = s.lang || glang;\n    s.payment = s.payment || gpay;\n    states[id] = s;\n  });\n  global.set('waGroupPayments', states);\n}\ntry { node.status({ fill: 'green', shape: 'dot', text: `ok (groups:${groups.length}, admins:${admins.length}, lang:${lang})` }); node.warn(`[WA GroupPay] Applied config: groups=${groups.length}, admins=${admins.length}, lang=${lang}, templates=${Object.keys(templates).length}, templatesByLang=${Object.keys(templatesByLang).length}`); } catch(e) {}\nreturn null;",
    "outputs": 0,
    "noerr": 0,
    "x": 520,
    "y": 20,
    "wires": []
  },
  {
    "id": "gp-load-config-inject",
    "type": "inject",
    "z": "wa-group-payment-reminder-flow",
    "name": "Load Config from File",
    "props": [
      { "p": "payload" },
      { "p": "topic", "vt": "str" }
    ],
    "repeat": "",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "x": 210,
    "y": 60,
    "wires": [["gp-config-file-in"]]
  },
  {
    "id": "gp-watch-config",
    "type": "watch",
    "z": "wa-group-payment-reminder-flow",
    "name": "Watch groupPay.json",
    "files": "c:\\AIapps\\WA-BOT\\workflow\\config\\groupPay.json",
    "recursive": false,
    "x": 220,
    "y": 100,
    "wires": [["gp-config-file-in"]]
  },
  {
    "id": "gp-config-file-in",
    "type": "file in",
    "z": "wa-group-payment-reminder-flow",
    "name": "Read Config (groupPay.json)",
    "filename": "c:\\AIapps\\WA-BOT\\workflow\\config\\groupPay.json",
    "format": "utf8",
    "chunk": false,
    "sendError": false,
    "encoding": "none",
    "x": 520,
    "y": 80,
    "wires": [["gp-parse-config"]]
  },
  {
    "id": "gp-parse-config",
    "type": "json",
    "z": "wa-group-payment-reminder-flow",
    "name": "Parse Config JSON",
    "property": "payload",
    "action": "",
    "pretty": false,
    "x": 770,
    "y": 80,
    "wires": [["gp-apply-config"]]
  },
  {
    "id": "gp-set-groups-inject",
    "type": "inject",
    "z": "wa-group-payment-reminder-flow",
    "name": "Set Groups (flow.wa.gp.groups)",
    "props": [
      { "p": "payload" },
      { "p": "topic", "vt": "str" }
    ],
    "repeat": "",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "[\"1203630XXXXXXXXXXX@g.us\"]",
    "payloadType": "json",
    "x": 230,
    "y": 40,
    "wires": [["gp-apply-groups"]]
  },
  {
    "id": "gp-apply-groups",
    "type": "function",
    "z": "wa-group-payment-reminder-flow",
    "name": "Apply Groups to Flow",
    "func": "const list = Array.isArray(msg.payload) ? msg.payload : [];\nflow.set('wa.gp.groups', list);\ntry { node.status({ fill: 'green', shape: 'dot', text: `groups:${list.length}` }); node.warn(`[WA GroupPay] Set groups: ${JSON.stringify(list)}`); } catch(e) {}\nreturn null;",
    "outputs": 0,
    "noerr": 0,
    "x": 520,
    "y": 40,
    "wires": []
  },
  {
    "id": "gp-arm-groups-inject",
    "type": "inject",
    "z": "wa-group-payment-reminder-flow",
    "name": "Arm Configured Groups",
    "props": [
      { "p": "payload" }
    ],
    "repeat": "",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "arm",
    "payloadType": "str",
    "x": 210,
    "y": 120,
    "wires": [["gp-arm-groups"]]
  },
  {
    "id": "gp-arm-groups",
    "type": "function",
    "z": "wa-group-payment-reminder-flow",
    "name": "Arm Groups From Config",
    "func": "const groups = flow.get('wa.gp.groups') || [];\nconst cfg = flow.get('wa.gp.config') || { periodMin: 1440, maxHours: 168 };\nconst states = global.get('waGroupPayments') || {};\nconst now = Date.now();\n(groups || []).forEach(g => {\n  if (!g || typeof g !== 'string') return;\n  const s = states[g] || { startedAt: now, lastSentAt: 0, count: 0, active: true, membersConfirmed: {} };\n  s.active = true;\n  s.startedAt = s.startedAt || now;\n  s.periodMs = (cfg.periodMin || 1440) * 60000;\n  s.maxMs = (cfg.maxHours || 168) * 3600000;\n  states[g] = s;\n});\nglobal.set('waGroupPayments', states);\ntry { node.status({ fill: 'blue', shape: 'dot', text: `armed:${groups.length}` }); node.warn(`[WA GroupPay] Armed ${groups.length} configured groups`); } catch(e) {}\nreturn null;",
    "outputs": 0,
    "noerr": 0,
    "x": 520,
    "y": 120,
    "wires": []
  },
  {
    "id": "gp-set-templates-inject",
    "type": "inject",
    "z": "wa-group-payment-reminder-flow",
    "name": "Set Templates (flow.wa.gp.templates)",
    "props": [
      { "p": "payload" }
    ],
    "repeat": "",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "{\n  \"reminder\": \"\\u23F0 Rent is due. Remaining: {days}d {hours}h. Please reply and I'll DM you.\",\n  \"dmConfirm\": \"✅ Thanks! Recorded your payment for {month}.\",\n  \"forwardNoteProof\": \"Payment proof from {author} in {group}\",\n  \"forwardNoteText\": \"Payment confirmation from {author} in {group}\"\n}",
    "payloadType": "json",
    "x": 260,
    "y": 80,
    "wires": [["gp-apply-templates"]]
  },
  {
    "id": "gp-apply-templates",
    "type": "function",
    "z": "wa-group-payment-reminder-flow",
    "name": "Apply Templates to Flow",
    "func": "const obj = (msg && msg.payload && typeof msg.payload === 'object') ? msg.payload : {};\nflow.set('wa.gp.templates', obj);\ntry { node.status({ fill: 'green', shape: 'dot', text: `templates:${Object.keys(obj).length}` }); node.warn(`[WA GroupPay] Set templates: ${Object.keys(obj).join(', ')}`); } catch(e) {}\nreturn null;",
    "outputs": 0,
    "noerr": 0,
    "x": 560,
    "y": 80,
    "wires": []
  },
  {
    "id": "gp-set-admins-inject",
    "type": "inject",
    "z": "wa-group-payment-reminder-flow",
    "name": "Set Admins (flow.wa.gp.admins)",
    "props": [
      {
        "p": "payload"
      },
      {
        "p": "topic",
        "vt": "str"
      }
    ],
    "repeat": "",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "[\"1234567890@c.us\"]",
    "payloadType": "json",
    "x": 210,
    "y": 80,
    "wires": [
      [
        "gp-apply-admins"
      ]
    ]
  },
  {
    "id": "gp-apply-admins",
    "type": "function",
    "z": "wa-group-payment-reminder-flow",
    "name": "Apply Admins to Flow",
    "func": "const list = Array.isArray(msg.payload) ? msg.payload : [];\nflow.set('wa.gp.admins', list);\ntry { node.status({ fill: 'green', shape: 'dot', text: `admins:${list.length}` }); node.warn(`[WA GroupPay] Set admins: ${JSON.stringify(list)}`); } catch(e) {}\nreturn null;",
    "outputs": 0,
    "noerr": 0,
    "x": 500,
    "y": 80,
    "wires": []
  },
  {
    "id": "broker",
    "type": "mqtt-broker",
    "name": "Local Broker",
    "broker": "localhost",
    "port": "1883",
    "clientid": "",
    "autoConnect": true,
    "usetls": false,
    "protocolVersion": "4",
    "keepalive": "60",
    "cleansession": true,
    "birthTopic": "",
    "birthQos": "0",
    "birthPayload": "",
    "birthMsg": {},
    "closeTopic": "",
    "closeQos": "0",
    "closePayload": "",
    "closeMsg": {},
    "willTopic": "",
    "willQos": "0",
    "willPayload": "",
    "willMsg": {},
    "sessionExpiry": ""
  }
]
