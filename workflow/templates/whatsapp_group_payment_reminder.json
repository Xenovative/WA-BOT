[
  {
    "id": "wa-group-payment-reminder-flow",
    "type": "tab",
    "label": "WhatsApp Group Payment Reminder",
    "disabled": false,
    "info": "Send payment reminders in group chats and DM each tenant who replies with confirmation. Triggers via MQTT topics: bot/outgoing (group prompts) and whatsapp/messages (inbound group replies)."
  },
  {
    "id": "gp-init",
    "type": "inject",
    "z": "wa-group-payment-reminder-flow",
    "name": "Init Group Payment",
    "props": [
      { "p": "payload" },
      { "p": "topic", "vt": "str" }
    ],
    "repeat": "",
    "crontab": "",
    "once": true,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "",
    "payloadType": "date",
    "x": 180,
    "y": 120,
    "wires": [["gp-set-defaults"]]
  },
  {
    "id": "gp-set-defaults",
    "type": "function",
    "z": "wa-group-payment-reminder-flow",
    "name": "Set Defaults",
    "func": "// Initialize config, keywords, admins, and state containers\nconst defCfg = { periodMin: 1440, maxHours: 168 }; // default: daily, 7 days window\nconst defKeywords = [\n  // English\n  'rent','payment','pay','due','bill','invoice','deposit','utility','utilities',\n  // Chinese\n  '租','房租','租金','繳費','缴费','付款','支付','水電','水电','押金'\n];\nflow.set('wa.gp.config', flow.get('wa.gp.config') || defCfg);\nflow.set('wa.gp.keywords', flow.get('wa.gp.keywords') || defKeywords);\n// Configure admin recipients for proof forwarding (edit this array in Node-RED)\nflow.set('wa.gp.admins', flow.get('wa.gp.admins') || []); // e.g., ['1234567890@c.us']\n\nglobal.set('waGroupPayments', global.get('waGroupPayments') || {});\ntry { const admins = (flow.get('wa.gp.admins')||[]).length; node.status({ fill: 'blue', shape: 'ring', text: `initialized defaults (admins:${admins})` }); node.warn('[WA GroupPay] Defaults initialized'); } catch(e) {}\nreturn null;",
    "outputs": 0,
    "noerr": 0,
    "x": 430,
    "y": 120,
    "wires": []
  },
  {
    "id": "gp-bot-out-mqtt",
    "type": "mqtt in",
    "z": "wa-group-payment-reminder-flow",
    "name": "Bot Outgoing (MQTT)",
    "topic": "bot/outgoing",
    "qos": "2",
    "datatype": "json",
    "broker": "broker",
    "nl": false,
    "rap": true,
    "rh": 0,
    "x": 190,
    "y": 180,
    "wires": [["gp-detect-group-prompt","gp-log-bot-out"]]
  },
  {
    "id": "gp-detect-group-prompt",
    "type": "function",
    "z": "wa-group-payment-reminder-flow",
    "name": "Detect Group Payment Prompt",
    "func": "// Arm/refresh group reminder when bot posts in a group about payment\n// Flatten payload (supports {payload:{...}} and flat shapes)\nconst root = (msg && msg.payload && msg.payload.payload) ? msg.payload.payload : (msg && msg.payload) ? msg.payload : {};\nlet chatId = root.chatId || root.to || root.toNumber || root.phone || msg.chatId || msg.to;\nconst platform = (root.platform || msg.platform || '').toLowerCase();\nconst text = String(root.text || root.message || root.content || root.body || msg.text || msg.message || msg.content || '');\nconst isGroup = !!(chatId && /@g\\.us$/.test(String(chatId)));\nif (!isGroup) { return null; }\nconst cfg = flow.get('wa.gp.config') || { periodMin: 1440, maxHours: 168 };\nconst kws = flow.get('wa.gp.keywords') || [];\nconst requirePayment = !!(root.requirePayment === true || root.require_payment === true || (msg.meta && msg.meta.requirePayment === true));\nconst lower = text.toLowerCase();\nlet matched = requirePayment || kws.some(k => lower.includes(String(k).toLowerCase()));\nif (!matched) {\n  const want = /(pay|paid|payment|due|remind|rent|invoice|bill|請|请|繳|缴|付|支付|租)/i.test(lower);\n  matched = want;\n}\nif (!matched) { try { node.warn(`[WA GroupPay] Outgoing not a payment prompt. groupId=${chatId} text='${text.slice(0,80)}'`); } catch(e){} return null; }\nconst states = global.get('waGroupPayments') || {};\nconst now = Date.now();\nconst s = states[chatId] || { startedAt: now, lastSentAt: 0, count: 0, active: true, membersConfirmed: {} };\ns.lastPromptAt = now;\ns.active = true;\ns.periodMs = (cfg.periodMin || 1440) * 60000;\ns.maxMs = (cfg.maxHours || 168) * 3600000;\ns.lastBotText = text || '';\nstates[chatId] = s;\nglobal.set('waGroupPayments', states);\ntry { node.status({ fill: 'blue', shape: 'dot', text: `armed ${chatId}` }); node.warn(`[WA GroupPay] Armed/refresh for ${chatId}`); } catch (e) {}\nreturn null;",
    "outputs": 0,
    "noerr": 0,
    "x": 470,
    "y": 180,
    "wires": []
  },
  {
    "id": "gp-tick",
    "type": "inject",
    "z": "wa-group-payment-reminder-flow",
    "name": "Reminder Tick (60s)",
    "props": [
      { "p": "payload" },
      { "p": "topic", "vt": "str" }
    ],
    "repeat": "60",
    "crontab": "",
    "once": true,
    "onceDelay": 1,
    "topic": "wa_group_payment_tick",
    "payload": "tick",
    "payloadType": "str",
    "x": 180,
    "y": 240,
    "wires": [["gp-scheduler","gp-log-tick"]]
  },
  {
    "id": "gp-scheduler",
    "type": "function",
    "z": "wa-group-payment-reminder-flow",
    "name": "Scheduler",
    "func": "// Iterate active groups and emit reminders on cadence until timeout\nconst states = global.get('waGroupPayments') || {};\nconst cfg = flow.get('wa.gp.config') || { periodMin: 1440, maxHours: 168 };\nconst now = Date.now();\nconst out = [];\nlet sent = 0;\nlet active = 0;\nObject.entries(states).forEach(([groupId, s]) => {\n  if (!s || s.active !== true) return;\n  active++;\n  const startedAt = s.startedAt || now;\n  const periodMs = s.periodMs || (cfg.periodMin * 60000);\n  const maxMs = s.maxMs || (cfg.maxHours * 3600000);\n  const elapsed = now - startedAt;\n  if (elapsed >= maxMs) { s.active = false; try { node.warn(`[WA GroupPay] Expired window for ${groupId} - deactivating`); } catch(e){} return; }\n  // suppress immediate echo after bot prompt (<= 60s)\n  if (s.lastPromptAt && (now - s.lastPromptAt) < 60000) return;\n  if (!s.lastSentAt || (now - s.lastSentAt) >= periodMs) {\n    const remaining = Math.max(0, maxMs - elapsed);\n    const days = Math.floor(remaining / 86400000);\n    const hrs = Math.floor((remaining % 86400000) / 3600000);\n    const reminder = `\u23F0 Group Reminder: Rent/Payment is due. Please reply in this group and I'll DM you for confirmation. Remaining window: ${days}d ${hrs}h.`;\n    out.push({ payload: { chatId: groupId, message: reminder, messageType: 'text' } });\n    s.lastSentAt = now;\n    s.count = (s.count || 0) + 1;\n    sent++;\n    try { node.status({ fill: 'green', shape: 'dot', text: `sent ${s.count} to ${groupId}` }); node.warn(`[WA GroupPay] Sent #${s.count} to ${groupId} (${days}d ${hrs}h left)`); } catch(e){}\n  }\n});\nglobal.set('waGroupPayments', states);\ntry { if (!sent) node.status({ fill: 'grey', shape: 'ring', text: 'no sends this tick' }); node.warn(`[WA GroupPay] Tick: active=${active}, sent=${sent}`); } catch(e){}\nreturn [out];",
    "outputs": 1,
    "noerr": 0,
    "x": 410,
    "y": 240,
    "wires": [["gp-send-reminder"]]
  },
  {
    "id": "gp-log-tick",
    "type": "debug",
    "z": "wa-group-payment-reminder-flow",
    "name": "Log Tick",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "x": 430,
    "y": 280,
    "wires": []
  },
  {
    "id": "gp-send-reminder",
    "type": "http request",
    "z": "wa-group-payment-reminder-flow",
    "name": "Send Reminder (Group)",
    "method": "POST",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "http://localhost:3000/api/workflow/send-message",
    "tls": "",
    "persist": false,
    "proxy": "",
    "authType": "",
    "x": 660,
    "y": 240,
    "wires": [["gp-log-send"]]
  },
  {
    "id": "gp-log-send",
    "type": "debug",
    "z": "wa-group-payment-reminder-flow",
    "name": "Log Group Reminder Send",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "true",
    "targetType": "full",
    "x": 920,
    "y": 240,
    "wires": []
  },
  {
    "id": "gp-inbound-mqtt",
    "type": "mqtt in",
    "z": "wa-group-payment-reminder-flow",
    "name": "WhatsApp Incoming (MQTT)",
    "topic": "whatsapp/messages",
    "qos": "2",
    "datatype": "json",
    "broker": "broker",
    "nl": false,
    "rap": true,
    "rh": 0,
    "x": 200,
    "y": 340,
    "wires": [["gp-detect-group-reply","gp-log-inbound"]]
  },
  {
    "id": "gp-detect-group-reply",
    "type": "function",
    "z": "wa-group-payment-reminder-flow",
    "name": "Detect Group Replies + DM + Forward",
    "func": "// On inbound group messages, DM the author if confirm/proof, and forward media proofs to admins\nconst root = (msg && msg.payload && msg.payload.payload) ? msg.payload.payload : (msg && msg.payload) ? msg.payload : {};\nconst groupId = root.chatId || msg.chatId;\nconst isGroup = !!(root.isGroup || (groupId && /@g\\.us$/.test(String(groupId))));\nif (!isGroup) return [null, null, msg];\nconst author = root.author || null;\nconst text = String(root.text || root.body || '');\nconst messageId = root.messageId || null;\nconst hasMedia = !!root.hasMedia;\nif (!author || !/@c\\.us$/.test(String(author))) return [null, null, msg];\n// Confirmation heuristics\nconst lower = text.toLowerCase();\nconst confirm = /(paid|done|transferred|transfer|sent|completed|ok|okay|confirm|confirmed|收|已付|已支付|已繳|已缴|轉了|转了|已轉|已转|已交)/i.test(lower);\nconst shouldDM = confirm || hasMedia;\nif (!shouldDM) return [null, null, msg];\n// Update state\nconst states = global.get('waGroupPayments') || {};\nconst s = states[groupId] || null;\nif (s) { s.membersConfirmed = s.membersConfirmed || {}; s.membersConfirmed[author] = { at: Date.now(), text, hasMedia, messageId }; states[groupId] = s; global.set('waGroupPayments', states); }\n// Compose DM\nconst monthStr = new Date().toLocaleString('en-US', { month: 'long', year: 'numeric' });\nconst dm = { payload: { chatId: author, message: `✅ Thanks! Recorded your payment confirmation for ${monthStr}.`, messageType: 'text' } };\n// Prepare admin forward if proof/confirmation exists and admins configured\nlet forward = null;\nconst admins = flow.get('wa.gp.admins') || [];\nif ((hasMedia || confirm) && messageId && admins.length > 0) {\n  const note = hasMedia ? `Payment proof from ${author} in ${groupId}` : `Payment confirmation from ${author} in ${groupId}`;\n  forward = { payload: { messageId, recipients: admins, note } };\n} else if ((hasMedia || confirm) && admins.length === 0) {\n  try { node.warn('[WA GroupPay] Proof/confirmation detected but no admins configured in flow context wa.gp.admins'); } catch(e){}\n}\nreturn [dm, forward, null];",
    "outputs": 3,
    "noerr": 0,
    "x": 470,
    "y": 340,
    "wires": [["gp-send-dm-confirm"], ["gp-forward-proof"], ["gp-inbound-pass"]]
  },
  {
    "id": "gp-send-dm-confirm",
    "type": "http request",
    "z": "wa-group-payment-reminder-flow",
    "name": "Send DM Confirm",
    "method": "POST",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "http://localhost:3000/api/workflow/send-message",
    "tls": "",
    "persist": false,
    "proxy": "",
    "authType": "",
    "x": 700,
    "y": 320,
    "wires": [["gp-log-dm"]]
  },
  {
    "id": "gp-log-dm",
    "type": "debug",
    "z": "wa-group-payment-reminder-flow",
    "name": "Log DM",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "x": 900,
    "y": 320,
    "wires": []
  },
  {
    "id": "gp-inbound-pass",
    "type": "debug",
    "z": "wa-group-payment-reminder-flow",
    "name": "Inbound (no confirm)",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "x": 710,
    "y": 360,
    "wires": []
  },
  {
    "id": "gp-forward-proof",
    "type": "http request",
    "z": "wa-group-payment-reminder-flow",
    "name": "Forward Proof to Admins",
    "method": "POST",
    "ret": "obj",
    "paytoqs": "ignore",
    "url": "http://localhost:3000/api/workflow/forward-proof",
    "tls": "",
    "persist": false,
    "proxy": "",
    "authType": "",
    "x": 740,
    "y": 400,
    "wires": [["gp-log-forward"]]
  },
  {
    "id": "gp-log-forward",
    "type": "debug",
    "z": "wa-group-payment-reminder-flow",
    "name": "Log Forward",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "x": 960,
    "y": 400,
    "wires": []
  },
  {
    "id": "gp-log-bot-out",
    "type": "debug",
    "z": "wa-group-payment-reminder-flow",
    "name": "Log Bot Outgoing (MQTT)",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "x": 470,
    "y": 140,
    "wires": []
  },
  {
    "id": "gp-log-inbound",
    "type": "debug",
    "z": "wa-group-payment-reminder-flow",
    "name": "Log WhatsApp Incoming (MQTT)",
    "active": true,
    "tosidebar": true,
    "console": false,
    "tostatus": false,
    "complete": "payload",
    "targetType": "msg",
    "x": 470,
    "y": 380,
    "wires": []
  },
  {
    "id": "gp-set-admins-inject",
    "type": "inject",
    "z": "wa-group-payment-reminder-flow",
    "name": "Set Admins (flow.wa.gp.admins)",
    "props": [
      {
        "p": "payload"
      },
      {
        "p": "topic",
        "vt": "str"
      }
    ],
    "repeat": "",
    "crontab": "",
    "once": false,
    "onceDelay": 0.1,
    "topic": "",
    "payload": "[\"1234567890@c.us\"]",
    "payloadType": "json",
    "x": 210,
    "y": 80,
    "wires": [
      [
        "gp-apply-admins"
      ]
    ]
  },
  {
    "id": "gp-apply-admins",
    "type": "function",
    "z": "wa-group-payment-reminder-flow",
    "name": "Apply Admins to Flow",
    "func": "const list = Array.isArray(msg.payload) ? msg.payload : [];\nflow.set('wa.gp.admins', list);\ntry { node.status({ fill: 'green', shape: 'dot', text: `admins:${list.length}` }); node.warn(`[WA GroupPay] Set admins: ${JSON.stringify(list)}`); } catch(e) {}\nreturn null;",
    "outputs": 0,
    "noerr": 0,
    "x": 500,
    "y": 80,
    "wires": []
  },
  {
    "id": "broker",
    "type": "mqtt-broker",
    "name": "Local Broker",
    "broker": "localhost",
    "port": "1883",
    "clientid": "",
    "autoConnect": true,
    "usetls": false,
    "protocolVersion": "4",
    "keepalive": "60",
    "cleansession": true,
    "birthTopic": "",
    "birthQos": "0",
    "birthPayload": "",
    "birthMsg": {},
    "closeTopic": "",
    "closeQos": "0",
    "closePayload": "",
    "closeMsg": {},
    "willTopic": "",
    "willQos": "0",
    "willPayload": "",
    "willMsg": {},
    "sessionExpiry": ""
  }
]
